{"ast":null,"code":"import { gql } from \"@apollo/client\";\nexport const GET_ROUTES = gql`\n# Gets the information on all transit routes from OTP\n    query getRoutes {\n        routes {\n            gtfsId\n            longName\n        }\n    }\n`;\nexport const ROUTE_DETAILS = gql`\n# Gets more details on each transit route\nquery Route($route_id: String!){\n    route(id:$route_id) {\n        longName\n        stops {\n            name\n            routes {\n                gtfsId\n                longName\n            }\n        }\n        trips {\n            tripGeometry {\n                length\n                points\n            }\n        }\n    }\n}\n`;\nexport const NEARBY_ROUTES = gql`\nquery nearbyRoutes($lat: Float!, $lon: Float!) {\n    stopsByRadius(lat: $lat, lon: $lon, radius: 1000){\n        edges {\n            node {\n                stop {\n                    routes {\n                        longName\n                        gtfsId\n                        trips {\n                            tripGeometry {\n                            points\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n`;\nexport const TRIP_PLANNING = gql`\nquery planTrip($from: String, $to: String){\n    plan(\n        fromPlace: $from\n        toPlace: $to\n        waitReluctance: 0\n        arriveBy: false\n        transportModes: [{mode: BUS}]\n        time: \"00:00:00\"\n        numItineraries: 3\n        walkReluctance: 4\n    ) {\n        itineraries {\n            walkDistance\n            legs {\n                mode\n                distance\n                from {\n                    lat\n                    lon\n                    name\n                    stop {\n                        code\n                        name\n                    }\n                }\n                to {\n                    lat\n                    lon\n                    name\n                }\n                route {\n                    longName\n                    gtfsId\n                }\n                distance\n                legGeometry {\n                    length\n                    points\n                }\n            }\n        }\n    }\n}\n`;","map":{"version":3,"names":["gql","GET_ROUTES","ROUTE_DETAILS","NEARBY_ROUTES","TRIP_PLANNING"],"sources":["/Users/maanpablico/Downloads/tsuperbook-1/src/graphql/Queries.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\n\r\n\r\nexport const GET_ROUTES = gql `\r\n# Gets the information on all transit routes from OTP\r\n    query getRoutes {\r\n        routes {\r\n            gtfsId\r\n            longName\r\n        }\r\n    }\r\n`\r\n\r\nexport const ROUTE_DETAILS = gql `\r\n# Gets more details on each transit route\r\nquery Route($route_id: String!){\r\n    route(id:$route_id) {\r\n        longName\r\n        stops {\r\n            name\r\n            routes {\r\n                gtfsId\r\n                longName\r\n            }\r\n        }\r\n        trips {\r\n            tripGeometry {\r\n                length\r\n                points\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n\r\nexport const NEARBY_ROUTES = gql `\r\nquery nearbyRoutes($lat: Float!, $lon: Float!) {\r\n    stopsByRadius(lat: $lat, lon: $lon, radius: 1000){\r\n        edges {\r\n            node {\r\n                stop {\r\n                    routes {\r\n                        longName\r\n                        gtfsId\r\n                        trips {\r\n                            tripGeometry {\r\n                            points\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n\r\nexport const TRIP_PLANNING = gql `\r\nquery planTrip($from: String, $to: String){\r\n    plan(\r\n        fromPlace: $from\r\n        toPlace: $to\r\n        waitReluctance: 0\r\n        arriveBy: false\r\n        transportModes: [{mode: BUS}]\r\n        time: \"00:00:00\"\r\n        numItineraries: 3\r\n        walkReluctance: 4\r\n    ) {\r\n        itineraries {\r\n            walkDistance\r\n            legs {\r\n                mode\r\n                distance\r\n                from {\r\n                    lat\r\n                    lon\r\n                    name\r\n                    stop {\r\n                        code\r\n                        name\r\n                    }\r\n                }\r\n                to {\r\n                    lat\r\n                    lon\r\n                    name\r\n                }\r\n                route {\r\n                    longName\r\n                    gtfsId\r\n                }\r\n                distance\r\n                legGeometry {\r\n                    length\r\n                    points\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,gBAAgB;AAIpC,OAAO,MAAMC,UAAU,GAAGD,GAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAME,aAAa,GAAGF,GAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMG,aAAa,GAAGH,GAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMI,aAAa,GAAGJ,GAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}